sf::st_crs(stream_strahler) <- EPSG
sf::write_sf(stream_strahler, "outputs/stream_strahler.shp", delete_layer = TRUE)
sf::write_sf(stream_model, "outputs/stream_model.shp", delete_layer = TRUE)
## Lê limite da área do projeto
area <- sf::read_sf(limite)
## Lê rios da área do projeto
rios_ibge = sf::read_sf(rios)
## Lê estaçoes da área do projeto
pour_points = sf::read_sf(estacoes)
estacoes
# Desloca pontos para a drenagem
## Snap metodo Jenson
stream <- "network_d8.tif"
output_snap <- "snappoints.shp"
sf::write_sf(pour_points,
file.path(wbt_wd, "estacoes.shp"),
delete_layer = TRUE)
if(fase == 2){
r = stars::read_stars(paste0(wbt_wd, "\\","strahler_order.tif"))
r[r > max_ordem] = NA
stars::write_stars(r, paste0(wbt_wd, "\\","strahler_order_1_4.tif"))
whitebox::wbt_jenson_snap_pour_points("estacoes.shp",
"strahler_order_1_4.tif",
output_snap,
snap_dist,
wd = wbt_wd)
} else{
whitebox::wbt_jenson_snap_pour_points("estacoes.shp",
"strahler_order.tif",
output_snap,
snap_dist,
wd = wbt_wd)
}
output_ws <-  "bacias.tif"
whitebox::wbt_watershed(output_d8_pntr,
output_snap,
output_ws,
wd = wbt_wd)
# Converte raster de bacias em shape
output_bacias <-  "bacias.shp"
whitebox::wbt_raster_to_vector_polygons(output_ws,
output_bacias,
wd = wbt_wd)
# Cria bacias não aninhadas
output_unest <- "unested_bacias.tif"
whitebox::wbt_unnest_basins(output_d8_pntr,
output_snap,
output_unest,
wd = wbt_wd)
path = paste0(wbt_wd, "\\")
# Converte raster de  bacias não anihadas em shape
l_output_ws <- NA
l_output_bacias <- NA
list_files <-
paste0(path, list.files(path, pattern = ".*unested_bacias"))
for (i in seq(list_files)) {
l_output_ws[i] <-  paste0(path, "unested_bacias_", i, ".shp")
}
l_output_ws <- rev(l_output_ws)
for (i in seq(list_files)) {
l_output_bacias[i] <-
paste0(path, "unested_bacias_", i, ".tif")
}
for (i in seq(1, length(l_output_ws))) {
whitebox::wbt_raster_to_vector_polygons(l_output_bacias[i],
l_output_ws[i], wd = wbt_wd)
}
# Cria uma lista dos nomes dos arquivos
#  das bacias não aninhadas
shapefile_list <- lapply(l_output_ws, sf::read_sf)
# Mescla as bacias não aninhadas
bacias_area <- do.call(rbind, shapefile_list)
# Remove arquivos unested
to_be_deleted <- list.files(path, pattern = "unested")
file.remove(paste0(path, to_be_deleted))
# # Salva bacias com os cálculos da área
sf::sf_use_s2(FALSE)
bacias_area$Area_sqm <-
as.numeric(round(sf::st_area(bacias_area) / 1000000, 0))
# Calcula área
sf::write_sf(bacias_area,
paste0("outputs/",
"bacias_area.shp"),
delete_layer = TRUE)
bacias_area
# Filtra bacias pelas áreas min e max
bacias_area <-
bacias_area[bacias_area$Area_sqm <= bacia_maxima &
bacias_area$Area_sqm >= bacia_minima,]
bacias_area
estacoes
# Lê pontos  planejados
pontos = sf::read_sf(estacoes)
# # Arruma a sequência do campo VALUE
pontos$VALUE <- seq(1:nrow(pontos))
# Filtra pelos pontos com bacias
pontos <- pontos %>% dplyr::arrange(VALUE)
bacias_area <- bacias_area %>% dplyr::arrange(VALUE)
pontos <- pontos[pontos$VALUE %in% bacias_area$VALUE,]
# Arruma a sequência do campo VALUE
pontos$VALUE <- seq(1:nrow(pontos))
bacias_area$VALUE <- seq(1:nrow(bacias_area))
sf::write_sf(bacias_area,
paste0("outputs/", "bacias_area.shp"),
delete_layer = TRUE)
sf::write_sf(pontos,
paste0("outputs/",  "estacoes_plan.shp"),
delete_layer =
TRUE)
sf::write_sf(pontos,
paste0(wbt_wd, "\\", "estacoes_plan.shp"),
delete_layer =
TRUE)
# Cria bacias a partir dos pontos deslocados
output_ws <-  "bacias.tif"
whitebox::wbt_watershed(d8_pntr = output_d8_pntr,
pour_pts = "estacoes_plan.shp",
output =  output_ws,
wd = wbt_wd )
# Converte raster de bacias em shape
output_bacias <- "bacias.shp"
whitebox::wbt_raster_to_vector_polygons(output_ws,
output_bacias, wd = wbt_wd)
output_bacias
bacias <- sf::read_sf(paste0(wbt_wd, "//", output_bacias))
sf::write_sf( bacias, paste0("outputs/", output_bacias), delete_layer = TRUE)
# Mapa
m <- ggplot2::ggplot() +
ggplot2::coord_fixed() +
ggspatial::layer_spatial(bacias,
fill = "yellow",
lwd = 0.7,
color = "green") +
ggspatial::layer_spatial(rios_ibge, color = "blue") +
ggspatial::layer_spatial(area, fill = NA, lwd = 0.5) +
ggspatial::layer_spatial(pontos, color = "red") +
ggplot2::theme_minimal() +
ggplot2::theme(legend.position = "bottom") +
ggspatial::annotation_scale(location = "bl", style = "ticks") +
ggspatial::annotation_north_arrow(location = "br") +
ggplot2::labs(caption = paste0(
"* Pontos vermelhos = pontos de coleta planejados.",
" N= ",
nrow(pontos)
))
png(
paste0("outputs/", "mapa_amostragem.png"),
units = "cm",
width = 16,
height = 16,
res = 300
)
print(m)
dev.off()
plot(bacias_area)
plot(bacias)
(output_ws
output_ws
plot(pontos)
plot(bacias)
output_ws
output_d8_pntr
output_d8_pntr
whitebox::wbt_watershed(d8_pntr = output_d8_pntr,
pour_pts = "snappoints.shp",
output =  output_ws,
wd = wbt_wd )
# Converte raster de bacias em shape
output_bacias <- "bacias.shp"
whitebox::wbt_raster_to_vector_polygons(output_ws,
output_bacias, wd = wbt_wd)
plot(bacias)
plot(bacias)
output_ws
whitebox::wbt_watershed(d8_pntr = output_d8_pntr,
pour_pts = "snappoints.shp",
output =  output_ws,
wd = wbt_wd )
# Converte raster de bacias em shape
output_bacias <- "bacias.shp"
whitebox::wbt_raster_to_vector_polygons(output_ws,
output_bacias, wd = wbt_wd)
plot(bacias)
whitebox::wbt_watershed(d8_pntr = output_d8_pntr,
pour_pts = "estacoes_plan.shp",
output =  output_ws,
wd = wbt_wd )
# Converte raster de bacias em shape
output_bacias <- "bacias.shp"
whitebox::wbt_raster_to_vector_polygons(output_ws,
output_bacias, wd = wbt_wd)
wbt_wd
output_bacias
bacias <- sf::read_sf(paste0(wbt_wd, "\\", "bacias.shp"))
plot(bacias)
output_snap
whitebox::wbt_jenson_snap_pour_points("estacoes_plan.shp",
"strahler_order_1_4.tif",
output_snap,
snap_dist,
wd = wbt_wd)
output_snap
# Filtra bacias pelas áreas min e max
bacias_area <-
bacias_area[bacias_area$Area_sqm <= bacia_maxima &
bacias_area$Area_sqm >= bacia_minima,]
# Lê pontos  planejados
pontos = sf::read_sf(paste0(wbt_wd, "\\", "snappoints.shp"))
# # Arruma a sequência do campo VALUE
pontos$VALUE <- seq(1:nrow(pontos))
# Filtra pelos pontos com bacias
pontos <- pontos %>% dplyr::arrange(VALUE)
bacias_area <- bacias_area %>% dplyr::arrange(VALUE)
pontos <- pontos[pontos$VALUE %in% bacias_area$VALUE,]
# Arruma a sequência do campo VALUE
pontos$VALUE <- seq(1:nrow(pontos))
bacias_area$VALUE <- seq(1:nrow(bacias_area))
sf::write_sf(bacias_area,
paste0("outputs/", "bacias_area.shp"),
delete_layer = TRUE)
sf::write_sf(pontos,
paste0("outputs/",  "estacoes_plan.shp"),
delete_layer =
TRUE)
pontos
sf::write_sf(pontos,
paste0("outputs/",  "estacoes_plan.shp"),
delete_layer =
TRUE)
pontos
sf::write_sf(pontos[, c("VALUE")],
paste0("outputs/",  "estacoes_plan.shp"),
delete_layer =
TRUE)
sf::write_sf(pontos,
paste0(wbt_wd, "\\", "estacoes_plan.shp"),
delete_layer =
TRUE)
sf::write_sf(pontos[, c("VALUE")],
paste0(wbt_wd, "\\", "estacoes_plan.shp"),
delete_layer =
TRUE)
# Cria bacias a partir dos pontos deslocados
output_ws <-  "bacias.tif"
whitebox::wbt_watershed(d8_pntr = output_d8_pntr,
pour_pts = "estacoes_plan.shp",
output =  output_ws,
wd = wbt_wd )
# Converte raster de bacias em shape
output_bacias <- "bacias.shp"
whitebox::wbt_raster_to_vector_polygons(output_ws,
output_bacias, wd = wbt_wd)
bacias <- sf::read_sf(paste0(wbt_wd, "//", output_bacias))
sf::write_sf( bacias, paste0("outputs/", output_bacias), delete_layer = TRUE)
plot(bacias)
# Mapa
m <- ggplot2::ggplot() +
ggplot2::coord_fixed() +
ggspatial::layer_spatial(bacias,
fill = "yellow",
lwd = 0.7,
color = "green") +
ggspatial::layer_spatial(rios_ibge, color = "blue") +
ggspatial::layer_spatial(area, fill = NA, lwd = 0.5) +
ggspatial::layer_spatial(pontos, color = "red") +
ggplot2::theme_minimal() +
ggplot2::theme(legend.position = "bottom") +
ggspatial::annotation_scale(location = "bl", style = "ticks") +
ggspatial::annotation_north_arrow(location = "br") +
ggplot2::labs(caption = paste0(
"* Pontos vermelhos = pontos de coleta planejados.",
" N= ",
nrow(pontos)
))
png(
paste0("outputs/", "mapa_amostragem.png"),
units = "cm",
width = 16,
height = 16,
res = 300
)
print(m)
dev.off()
gc()
library(digeoqR)
modela_bacias(fase = 1,  estacoes = "outputs/estacoes_planejadas.shp")
library(digeoqR)
modela_bacias(fase = 1,  estacoes = "outputs/estacoes_planejadas.shp")
library(digeoqR)
modela_bacias(fase = 1,  estacoes = "outputs/estacoes_planejadas.shp")
modela_bacias(fase = 2,  estacoes = "inputs/campo/estacoes.shp")
gera_estacoes()
library(digeoqR)
gera_estacoes()
modela_bacias(fase = 1,  estacoes = "outputs/estacoes_geradas.shp")
modela_bacias(fase = 2,  estacoes = "inputs/campo/estacoes.shp")
library(digeoqR)
modela_bacias(fase = 1,  estacoes = "outputs/estacoes_geradas.shp")
modela_bacias(fase = 2,  estacoes = "inputs/campo/estacoes.shp")
modela_bacias(fase = 2,  estacoes = "inputs/campo/estacoes.shp", bacia_minima = 1)
modela_bacias(fase = 1,  estacoes = "outputs/estacoes_geradas.shp", rios = "outputs/stream_model.shp")
gera_drenagem <- function(srtm = "inputs/imagens/srtm.tif",
rios = "inputs/campo/rios_ibge.shp",
massa_dagua = "inputs/campo/massa_dagua.shp",
limite = "inputs/campo/carta_100M.shp",
threshold = 250, min_length = 0.02,
max_ordem = 4)
{
### GERA DRENAGENS--------------------------------------------------------------
wbt_wd <- tempdir(check = TRUE)
options("rgdal_show_exportToProj4_warnings" = "none")
whitebox::wbt_rasterize_streams(
rios,
base = srtm,
output = "network_topage.tif",
nodata = 0,
wd = wbt_wd
)
# Burn this river network on the DEM
# We will neglect the effect of the road embankments at this DEM resolution of 100m
# by creating an empty shapefile for roads
sf::write_sf(
sf::st_sfc(sf::st_multilinestring(), crs = 4326),
file.path(wbt_wd, "roads.shp"),
delete_layer = TRUE,
quiet = TRUE
)
network_topage <- sf::read_sf(rios)
sf::write_sf(network_topage,
file.path(wbt_wd, "network_topage.shp"),
delete_layer = TRUE,
quiet = TRUE
)
whitebox::wbt_burn_streams_at_roads(
dem = srtm,
streams = "network_topage.shp",
roads = "roads.shp",
output = "dem_100m_burn.tif",
wd = wbt_wd
)
# Remove the depressions on the DEM
whitebox::wbt_fill_depressions(dem = "dem_100m_burn.tif",
output = "dem_fill.tif",
wd = wbt_wd)
# Flow direction raster
whitebox::wbt_d8_pointer(dem = "dem_fill.tif",
output = "d8.tif",
wd = wbt_wd)
# Compute flow accumulation
whitebox::wbt_d8_flow_accumulation(
input = "d8.tif",
pntr = TRUE,
output = "facc.tif",
wd = wbt_wd
)
# Extract a stream network (threshold = 1 km2) consistent with flow direction
whitebox::wbt_extract_streams(
flow_accum =  "facc.tif",
threshold = threshold,
# 100 cells for 1 km2
output = "network_1km2.tif",
zero_background = TRUE,
wd = wbt_wd
)
whitebox::wbt_remove_short_streams(
d8_pntr = "d8.tif",
streams = "network_1km2.tif",
output = "network_d8.tif",
min_length = min_length,
wd = wbt_wd
)
output_d8_pntr <- "d8.tif"
#
whitebox::wbt_raster_streams_to_vector("network_d8.tif",
"d8.tif",
output = "network_d8.shp",
wd = wbt_wd)
stream_model <-sf::read_sf(file.path(wbt_wd, "network_d8.shp"))
# class(crs_wgs84)
# cat(crs_wgs84$wkt)
sf::st_crs(stream_model) <- EPSG
# Gera drenagem classificada strahler
output_order <- "strahler_order.tif"
whitebox::wbt_strahler_stream_order(output_d8_pntr,
"network_d8.tif",
output_order,
wd = wbt_wd)
output_drenagem_ord <- "stream_strahler.shp"
whitebox::wbt_raster_streams_to_vector(output_order,
output_d8_pntr,
output_drenagem_ord,
wd = wbt_wd)
stream_strahler <- sf::read_sf(file.path(wbt_wd, "stream_strahler.shp"))
sf::st_crs(stream_strahler) <- EPSG
sf::write_sf(stream_strahler, "outputs/stream_strahler.shp", delete_layer = TRUE)
sf::write_sf(stream_model, "outputs/stream_model.shp", delete_layer = TRUE)
}
gera_drenagem()
gera_drenagem <- function(srtm = "inputs/imagens/srtm.tif", EPSG = 4326,
rios = "inputs/campo/rios_ibge.shp",
massa_dagua = "inputs/campo/massa_dagua.shp",
limite = "inputs/campo/carta_100M.shp",
threshold = 250, min_length = 0.02,
max_ordem = 4)
{
### GERA DRENAGENS--------------------------------------------------------------
wbt_wd <- tempdir(check = TRUE)
options("rgdal_show_exportToProj4_warnings" = "none")
whitebox::wbt_rasterize_streams(
rios,
base = srtm,
output = "network_topage.tif",
nodata = 0,
wd = wbt_wd
)
# Burn this river network on the DEM
# We will neglect the effect of the road embankments at this DEM resolution of 100m
# by creating an empty shapefile for roads
sf::write_sf(
sf::st_sfc(sf::st_multilinestring(), crs = 4326),
file.path(wbt_wd, "roads.shp"),
delete_layer = TRUE,
quiet = TRUE
)
network_topage <- sf::read_sf(rios)
sf::write_sf(network_topage,
file.path(wbt_wd, "network_topage.shp"),
delete_layer = TRUE,
quiet = TRUE
)
whitebox::wbt_burn_streams_at_roads(
dem = srtm,
streams = "network_topage.shp",
roads = "roads.shp",
output = "dem_100m_burn.tif",
wd = wbt_wd
)
# Remove the depressions on the DEM
whitebox::wbt_fill_depressions(dem = "dem_100m_burn.tif",
output = "dem_fill.tif",
wd = wbt_wd)
# Flow direction raster
whitebox::wbt_d8_pointer(dem = "dem_fill.tif",
output = "d8.tif",
wd = wbt_wd)
# Compute flow accumulation
whitebox::wbt_d8_flow_accumulation(
input = "d8.tif",
pntr = TRUE,
output = "facc.tif",
wd = wbt_wd
)
# Extract a stream network (threshold = 1 km2) consistent with flow direction
whitebox::wbt_extract_streams(
flow_accum =  "facc.tif",
threshold = threshold,
# 100 cells for 1 km2
output = "network_1km2.tif",
zero_background = TRUE,
wd = wbt_wd
)
whitebox::wbt_remove_short_streams(
d8_pntr = "d8.tif",
streams = "network_1km2.tif",
output = "network_d8.tif",
min_length = min_length,
wd = wbt_wd
)
output_d8_pntr <- "d8.tif"
#
whitebox::wbt_raster_streams_to_vector("network_d8.tif",
"d8.tif",
output = "network_d8.shp",
wd = wbt_wd)
stream_model <-sf::read_sf(file.path(wbt_wd, "network_d8.shp"))
# class(crs_wgs84)
# cat(crs_wgs84$wkt)
sf::st_crs(stream_model) <- EPSG
# Gera drenagem classificada strahler
output_order <- "strahler_order.tif"
whitebox::wbt_strahler_stream_order(output_d8_pntr,
"network_d8.tif",
output_order,
wd = wbt_wd)
output_drenagem_ord <- "stream_strahler.shp"
whitebox::wbt_raster_streams_to_vector(output_order,
output_d8_pntr,
output_drenagem_ord,
wd = wbt_wd)
stream_strahler <- sf::read_sf(file.path(wbt_wd, "stream_strahler.shp"))
sf::st_crs(stream_strahler) <- EPSG
sf::write_sf(stream_strahler, "outputs/stream_strahler.shp", delete_layer = TRUE)
sf::write_sf(stream_model, "outputs/stream_model.shp", delete_layer = TRUE)
}
gera_drenagem()
library(digeoqR)
library(digeoqR)
library(digeoqR)
devtools::document()
library(digeoqR)
gera_estacoes()
modela_bacias(fase = 1,  estacoes = "outputs/estacoes_geradas.shp")
prepara_dem()
modela_bacias(fase = 1,  estacoes = "outputs/estacoes_geradas.shp")
prepara_bases(tipo = 1, analise = 2)
out <- list()
tipo = 1
prepara_bases(tipo = 1, analise = 1)
library(digeoqR)
library(digeoqR)
prepara_bases(tipo = 1, analise = 1)
prepara_bases(analise = 2, tipo = 2)
